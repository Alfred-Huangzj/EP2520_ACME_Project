# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ovpn3
else:
    import _ovpn3

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class IPv4Addr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    SIZE = _ovpn3.IPv4Addr_SIZE

    def defined(self):
        return _ovpn3.IPv4Addr_defined(self)

    @staticmethod
    def from_addr(addr):
        return _ovpn3.IPv4Addr_from_addr(addr)

    @staticmethod
    def from_in_addr(in4):
        return _ovpn3.IPv4Addr_from_in_addr(in4)

    def to_in_addr(self):
        return _ovpn3.IPv4Addr_to_in_addr(self)

    @staticmethod
    def from_sockaddr(sa):
        return _ovpn3.IPv4Addr_from_sockaddr(sa)

    def to_sockaddr(self, port=0):
        return _ovpn3.IPv4Addr_to_sockaddr(self, port)

    @staticmethod
    def from_uint32(addr):
        return _ovpn3.IPv4Addr_from_uint32(addr)

    def to_uint32(self):
        return _ovpn3.IPv4Addr_to_uint32(self)

    @staticmethod
    def from_uint32_net(addr):
        return _ovpn3.IPv4Addr_from_uint32_net(addr)

    def to_byte_string(self, bytestr):
        return _ovpn3.IPv4Addr_to_byte_string(self, bytestr)

    def to_uint32_net(self):
        return _ovpn3.IPv4Addr_to_uint32_net(self)

    @staticmethod
    def from_ulong(ul):
        return _ovpn3.IPv4Addr_from_ulong(ul)

    def to_ulong(self):
        return _ovpn3.IPv4Addr_to_ulong(self)

    @staticmethod
    def from_long(ul):
        return _ovpn3.IPv4Addr_from_long(ul)

    def to_long(self):
        return _ovpn3.IPv4Addr_to_long(self)

    @staticmethod
    def from_bytes(bytes):
        return _ovpn3.IPv4Addr_from_bytes(bytes)

    @staticmethod
    def from_bytes_net(bytes):
        return _ovpn3.IPv4Addr_from_bytes_net(bytes)

    @staticmethod
    def from_zero():
        return _ovpn3.IPv4Addr_from_zero()

    @staticmethod
    def from_one():
        return _ovpn3.IPv4Addr_from_one()

    @staticmethod
    def from_zero_complement():
        return _ovpn3.IPv4Addr_from_zero_complement()

    @staticmethod
    def netmask_from_prefix_len(prefix_len):
        return _ovpn3.IPv4Addr_netmask_from_prefix_len(prefix_len)

    def netmask_from_extent(self):
        return _ovpn3.IPv4Addr_netmask_from_extent(self)

    @staticmethod
    def from_string(ipstr, title=None):
        return _ovpn3.IPv4Addr_from_string(ipstr, title)

    def to_string(self):
        return _ovpn3.IPv4Addr_to_string(self)

    @staticmethod
    def from_hex(s):
        return _ovpn3.IPv4Addr_from_hex(s)

    def to_hex(self):
        return _ovpn3.IPv4Addr_to_hex(self)

    def arpa(self):
        return _ovpn3.IPv4Addr_arpa(self)

    def __and__(self, other):
        return _ovpn3.IPv4Addr___and__(self, other)

    def __or__(self, other):
        return _ovpn3.IPv4Addr___or__(self, other)

    def __add__(self, *args):
        return _ovpn3.IPv4Addr___add__(self, *args)

    def __sub__(self, *args):
        return _ovpn3.IPv4Addr___sub__(self, *args)

    def __mul__(self, other):
        return _ovpn3.IPv4Addr___mul__(self, other)

    def __truediv__(self, *args):
        return _ovpn3.IPv4Addr___truediv__(self, *args)
    __div__ = __truediv__



    def __mod__(self, other):
        return _ovpn3.IPv4Addr___mod__(self, other)

    def __lshift__(self, shift):
        return _ovpn3.IPv4Addr___lshift__(self, shift)

    def __rshift__(self, shift):
        return _ovpn3.IPv4Addr___rshift__(self, shift)

    def __invert__(self):
        return _ovpn3.IPv4Addr___invert__(self)

    def network_addr(self, prefix_len):
        return _ovpn3.IPv4Addr_network_addr(self, prefix_len)

    def __eq__(self, other):
        return _ovpn3.IPv4Addr___eq__(self, other)

    def __ne__(self, other):
        return _ovpn3.IPv4Addr___ne__(self, other)

    def __lt__(self, other):
        return _ovpn3.IPv4Addr___lt__(self, other)

    def __gt__(self, other):
        return _ovpn3.IPv4Addr___gt__(self, other)

    def __le__(self, other):
        return _ovpn3.IPv4Addr___le__(self, other)

    def __ge__(self, other):
        return _ovpn3.IPv4Addr___ge__(self, other)

    def unspecified(self):
        return _ovpn3.IPv4Addr_unspecified(self)

    def specified(self):
        return _ovpn3.IPv4Addr_specified(self)

    def all_zeros(self):
        return _ovpn3.IPv4Addr_all_zeros(self)

    def all_ones(self):
        return _ovpn3.IPv4Addr_all_ones(self)

    def is_loopback(self):
        return _ovpn3.IPv4Addr_is_loopback(self)

    def prefix_len(self):
        return _ovpn3.IPv4Addr_prefix_len(self)

    def prefix_len_nothrow(self):
        return _ovpn3.IPv4Addr_prefix_len_nothrow(self)

    def host_len(self):
        return _ovpn3.IPv4Addr_host_len(self)

    def extent_from_netmask(self):
        return _ovpn3.IPv4Addr_extent_from_netmask(self)

    def extent_from_netmask_uint32(self):
        return _ovpn3.IPv4Addr_extent_from_netmask_uint32(self)

    @staticmethod
    def prefix_len_32(addr):
        return _ovpn3.IPv4Addr_prefix_len_32(addr)

    @staticmethod
    def size():
        return _ovpn3.IPv4Addr_size()

    def hashval(self):
        return _ovpn3.IPv4Addr_hashval(self)

    def __str__(self):
        return _ovpn3.IPv4Addr___str__(self)

    def __repr__(self):
        return _ovpn3.IPv4Addr___repr__(self)

    def __hash__(self):
        return self.hashval()


    marshall_type = str

    __swig_destroy__ = _ovpn3.delete_IPv4Addr

# Register IPv4Addr in _ovpn3:
_ovpn3.IPv4Addr_swigregister(IPv4Addr)

def IPv4Addr_from_addr(addr):
    return _ovpn3.IPv4Addr_from_addr(addr)

def IPv4Addr_from_in_addr(in4):
    return _ovpn3.IPv4Addr_from_in_addr(in4)

def IPv4Addr_from_sockaddr(sa):
    return _ovpn3.IPv4Addr_from_sockaddr(sa)

def IPv4Addr_from_uint32(addr):
    return _ovpn3.IPv4Addr_from_uint32(addr)

def IPv4Addr_from_uint32_net(addr):
    return _ovpn3.IPv4Addr_from_uint32_net(addr)

def IPv4Addr_from_ulong(ul):
    return _ovpn3.IPv4Addr_from_ulong(ul)

def IPv4Addr_from_long(ul):
    return _ovpn3.IPv4Addr_from_long(ul)

def IPv4Addr_from_bytes(bytes):
    return _ovpn3.IPv4Addr_from_bytes(bytes)

def IPv4Addr_from_bytes_net(bytes):
    return _ovpn3.IPv4Addr_from_bytes_net(bytes)

def IPv4Addr_from_zero():
    return _ovpn3.IPv4Addr_from_zero()

def IPv4Addr_from_one():
    return _ovpn3.IPv4Addr_from_one()

def IPv4Addr_from_zero_complement():
    return _ovpn3.IPv4Addr_from_zero_complement()

def IPv4Addr_netmask_from_prefix_len(prefix_len):
    return _ovpn3.IPv4Addr_netmask_from_prefix_len(prefix_len)

def IPv4Addr_from_string(ipstr, title=None):
    return _ovpn3.IPv4Addr_from_string(ipstr, title)

def IPv4Addr_from_hex(s):
    return _ovpn3.IPv4Addr_from_hex(s)

def IPv4Addr_prefix_len_32(addr):
    return _ovpn3.IPv4Addr_prefix_len_32(addr)

def IPv4Addr_size():
    return _ovpn3.IPv4Addr_size()

class IPv6Addr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    SIZE = _ovpn3.IPv6Addr_SIZE

    def defined(self):
        return _ovpn3.IPv6Addr_defined(self)

    @staticmethod
    def from_addr(addr):
        return _ovpn3.IPv6Addr_from_addr(addr)

    @staticmethod
    def from_in6_addr(in6):
        return _ovpn3.IPv6Addr_from_in6_addr(in6)

    def to_in6_addr(self):
        return _ovpn3.IPv6Addr_to_in6_addr(self)

    @staticmethod
    def from_sockaddr(sa):
        return _ovpn3.IPv6Addr_from_sockaddr(sa)

    def to_sockaddr(self, port=0):
        return _ovpn3.IPv6Addr_to_sockaddr(self, port)

    @staticmethod
    def from_string(ipstr, title=None):
        return _ovpn3.IPv6Addr_from_string(ipstr, title)

    def to_string(self):
        return _ovpn3.IPv6Addr_to_string(self)

    @staticmethod
    def from_hex(s):
        return _ovpn3.IPv6Addr_from_hex(s)

    def to_hex(self):
        return _ovpn3.IPv6Addr_to_hex(self)

    @staticmethod
    def from_ulong(ul):
        return _ovpn3.IPv6Addr_from_ulong(ul)

    def to_ulong(self):
        return _ovpn3.IPv6Addr_to_ulong(self)

    @staticmethod
    def from_long(ul):
        return _ovpn3.IPv6Addr_from_long(ul)

    def to_long(self):
        return _ovpn3.IPv6Addr_to_long(self)

    def arpa(self):
        return _ovpn3.IPv6Addr_arpa(self)

    @staticmethod
    def from_byte_string(bytestr):
        return _ovpn3.IPv6Addr_from_byte_string(bytestr)

    def to_byte_string(self, bytestr):
        return _ovpn3.IPv6Addr_to_byte_string(self, bytestr)

    @staticmethod
    def v4_to_byte_string(bytestr, v4addr):
        return _ovpn3.IPv6Addr_v4_to_byte_string(bytestr, v4addr)

    @staticmethod
    def byte_string_is_v4(bytestr):
        return _ovpn3.IPv6Addr_byte_string_is_v4(bytestr)

    @staticmethod
    def v4_from_byte_string(bytestr):
        return _ovpn3.IPv6Addr_v4_from_byte_string(bytestr)

    @staticmethod
    def from_zero():
        return _ovpn3.IPv6Addr_from_zero()

    @staticmethod
    def from_one():
        return _ovpn3.IPv6Addr_from_one()

    @staticmethod
    def from_zero_complement():
        return _ovpn3.IPv6Addr_from_zero_complement()

    @staticmethod
    def netmask_from_prefix_len(prefix_len):
        return _ovpn3.IPv6Addr_netmask_from_prefix_len(prefix_len)

    def netmask_from_extent(self):
        return _ovpn3.IPv6Addr_netmask_from_extent(self)

    def __and__(self, other):
        return _ovpn3.IPv6Addr___and__(self, other)

    def __or__(self, other):
        return _ovpn3.IPv6Addr___or__(self, other)

    def __add__(self, *args):
        return _ovpn3.IPv6Addr___add__(self, *args)

    def __sub__(self, *args):
        return _ovpn3.IPv6Addr___sub__(self, *args)

    def __mul__(self, d):
        return _ovpn3.IPv6Addr___mul__(self, d)

    def __truediv__(self, *args):
        return _ovpn3.IPv6Addr___truediv__(self, *args)
    __div__ = __truediv__



    def __mod__(self, d):
        return _ovpn3.IPv6Addr___mod__(self, d)

    def __lshift__(self, shift):
        return _ovpn3.IPv6Addr___lshift__(self, shift)

    def __rshift__(self, shift):
        return _ovpn3.IPv6Addr___rshift__(self, shift)

    def __invert__(self):
        return _ovpn3.IPv6Addr___invert__(self)

    def network_addr(self, prefix_len):
        return _ovpn3.IPv6Addr_network_addr(self, prefix_len)

    def __eq__(self, other):
        return _ovpn3.IPv6Addr___eq__(self, other)

    def __ne__(self, other):
        return _ovpn3.IPv6Addr___ne__(self, other)

    def __lt__(self, other):
        return _ovpn3.IPv6Addr___lt__(self, other)

    def __gt__(self, other):
        return _ovpn3.IPv6Addr___gt__(self, other)

    def __le__(self, other):
        return _ovpn3.IPv6Addr___le__(self, other)

    def __ge__(self, other):
        return _ovpn3.IPv6Addr___ge__(self, other)

    def unspecified(self):
        return _ovpn3.IPv6Addr_unspecified(self)

    def specified(self):
        return _ovpn3.IPv6Addr_specified(self)

    def all_zeros(self):
        return _ovpn3.IPv6Addr_all_zeros(self)

    def all_ones(self):
        return _ovpn3.IPv6Addr_all_ones(self)

    def is_loopback(self):
        return _ovpn3.IPv6Addr_is_loopback(self)

    def bit(self, pos):
        return _ovpn3.IPv6Addr_bit(self, pos)

    def prefix_len(self):
        return _ovpn3.IPv6Addr_prefix_len(self)

    def host_len(self):
        return _ovpn3.IPv6Addr_host_len(self)

    def extent_from_netmask(self):
        return _ovpn3.IPv6Addr_extent_from_netmask(self)

    @staticmethod
    def size():
        return _ovpn3.IPv6Addr_size()

    def hashval(self):
        return _ovpn3.IPv6Addr_hashval(self)

    def __str__(self):
        return _ovpn3.IPv6Addr___str__(self)

    def __repr__(self):
        return _ovpn3.IPv6Addr___repr__(self)

    def __hash__(self):
        return self.hashval()


    marshall_type = str

    __swig_destroy__ = _ovpn3.delete_IPv6Addr

# Register IPv6Addr in _ovpn3:
_ovpn3.IPv6Addr_swigregister(IPv6Addr)

def IPv6Addr_from_addr(addr):
    return _ovpn3.IPv6Addr_from_addr(addr)

def IPv6Addr_from_in6_addr(in6):
    return _ovpn3.IPv6Addr_from_in6_addr(in6)

def IPv6Addr_from_sockaddr(sa):
    return _ovpn3.IPv6Addr_from_sockaddr(sa)

def IPv6Addr_from_string(ipstr, title=None):
    return _ovpn3.IPv6Addr_from_string(ipstr, title)

def IPv6Addr_from_hex(s):
    return _ovpn3.IPv6Addr_from_hex(s)

def IPv6Addr_from_ulong(ul):
    return _ovpn3.IPv6Addr_from_ulong(ul)

def IPv6Addr_from_long(ul):
    return _ovpn3.IPv6Addr_from_long(ul)

def IPv6Addr_from_byte_string(bytestr):
    return _ovpn3.IPv6Addr_from_byte_string(bytestr)

def IPv6Addr_v4_to_byte_string(bytestr, v4addr):
    return _ovpn3.IPv6Addr_v4_to_byte_string(bytestr, v4addr)

def IPv6Addr_byte_string_is_v4(bytestr):
    return _ovpn3.IPv6Addr_byte_string_is_v4(bytestr)

def IPv6Addr_v4_from_byte_string(bytestr):
    return _ovpn3.IPv6Addr_v4_from_byte_string(bytestr)

def IPv6Addr_from_zero():
    return _ovpn3.IPv6Addr_from_zero()

def IPv6Addr_from_one():
    return _ovpn3.IPv6Addr_from_one()

def IPv6Addr_from_zero_complement():
    return _ovpn3.IPv6Addr_from_zero_complement()

def IPv6Addr_netmask_from_prefix_len(prefix_len):
    return _ovpn3.IPv6Addr_netmask_from_prefix_len(prefix_len)

def IPv6Addr_size():
    return _ovpn3.IPv6Addr_size()

class IPAddr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    UNSPEC = _ovpn3.IPAddr_UNSPEC
    V4 = _ovpn3.IPAddr_V4
    V6 = _ovpn3.IPAddr_V6
    V4_MASK = _ovpn3.IPAddr_V4_MASK
    V6_MASK = _ovpn3.IPAddr_V6_MASK
    V4_SIZE = _ovpn3.IPAddr_V4_SIZE
    V6_SIZE = _ovpn3.IPAddr_V6_SIZE

    def __init__(self, *args):
        _ovpn3.IPAddr_swiginit(self, _ovpn3.new_IPAddr(*args))

    def validate_version(self, title, required_version):
        return _ovpn3.IPAddr_validate_version(self, title, required_version)

    @staticmethod
    def validate(*args):
        return _ovpn3.IPAddr_validate(*args)

    @staticmethod
    def is_valid(ipstr):
        return _ovpn3.IPAddr_is_valid(ipstr)

    @staticmethod
    def from_string(*args):
        return _ovpn3.IPAddr_from_string(*args)

    @staticmethod
    def from_hex(v, s):
        return _ovpn3.IPAddr_from_hex(v, s)

    @staticmethod
    def from_ipv4(addr):
        return _ovpn3.IPAddr_from_ipv4(addr)

    @staticmethod
    def from_ipv6(addr):
        return _ovpn3.IPAddr_from_ipv6(addr)

    def to_ipv4(self):
        return _ovpn3.IPAddr_to_ipv4(self)

    def to_ipv6(self):
        return _ovpn3.IPAddr_to_ipv6(self)

    def to_ipv4_nocheck(self):
        return _ovpn3.IPAddr_to_ipv4_nocheck(self)

    def to_ipv6_nocheck(self):
        return _ovpn3.IPAddr_to_ipv6_nocheck(self)

    @staticmethod
    def from_sockaddr(sa):
        return _ovpn3.IPAddr_from_sockaddr(sa)

    @staticmethod
    def sockaddr_defined(sa):
        return _ovpn3.IPAddr_sockaddr_defined(sa)

    @staticmethod
    def from_ulong(v, ul):
        return _ovpn3.IPAddr_from_ulong(v, ul)

    def to_ulong(self):
        return _ovpn3.IPAddr_to_ulong(self)

    @staticmethod
    def from_long(v, ul):
        return _ovpn3.IPAddr_from_long(v, ul)

    def to_long(self):
        return _ovpn3.IPAddr_to_long(self)

    @staticmethod
    def from_byte_string(bytestr):
        return _ovpn3.IPAddr_from_byte_string(bytestr)

    def to_byte_string(self, bytestr):
        return _ovpn3.IPAddr_to_byte_string(self, bytestr)

    def to_byte_string_variable(self, bytestr):
        return _ovpn3.IPAddr_to_byte_string_variable(self, bytestr)

    def to_uint32_net(self):
        return _ovpn3.IPAddr_to_uint32_net(self)

    @staticmethod
    def from_zero(v):
        return _ovpn3.IPAddr_from_zero(v)

    @staticmethod
    def from_one(v):
        return _ovpn3.IPAddr_from_one(v)

    @staticmethod
    def from_zero_complement(v):
        return _ovpn3.IPAddr_from_zero_complement(v)

    @staticmethod
    def validate_prefix_len(v, prefix_len):
        return _ovpn3.IPAddr_validate_prefix_len(v, prefix_len)

    @staticmethod
    def netmask_from_prefix_len(v, prefix_len):
        return _ovpn3.IPAddr_netmask_from_prefix_len(v, prefix_len)

    def netmask_from_extent(self):
        return _ovpn3.IPAddr_netmask_from_extent(self)

    def to_string(self):
        return _ovpn3.IPAddr_to_string(self)

    def to_string_bracket_ipv6(self):
        return _ovpn3.IPAddr_to_string_bracket_ipv6(self)

    def to_hex(self):
        return _ovpn3.IPAddr_to_hex(self)

    def arpa(self):
        return _ovpn3.IPAddr_arpa(self)

    def __add__(self, *args):
        return _ovpn3.IPAddr___add__(self, *args)

    def __sub__(self, *args):
        return _ovpn3.IPAddr___sub__(self, *args)

    def __mul__(self, other):
        return _ovpn3.IPAddr___mul__(self, other)

    def __truediv__(self, *args):
        return _ovpn3.IPAddr___truediv__(self, *args)
    __div__ = __truediv__



    def __mod__(self, other):
        return _ovpn3.IPAddr___mod__(self, other)

    def __and__(self, other):
        return _ovpn3.IPAddr___and__(self, other)

    def __or__(self, other):
        return _ovpn3.IPAddr___or__(self, other)

    def __lshift__(self, shift):
        return _ovpn3.IPAddr___lshift__(self, shift)

    def __rshift__(self, shift):
        return _ovpn3.IPAddr___rshift__(self, shift)

    def __invert__(self):
        return _ovpn3.IPAddr___invert__(self)

    def network_addr(self, prefix_len):
        return _ovpn3.IPAddr_network_addr(self, prefix_len)

    def __eq__(self, other):
        return _ovpn3.IPAddr___eq__(self, other)

    def __ne__(self, other):
        return _ovpn3.IPAddr___ne__(self, other)

    def __lt__(self, other):
        return _ovpn3.IPAddr___lt__(self, other)

    def __gt__(self, other):
        return _ovpn3.IPAddr___gt__(self, other)

    def __le__(self, other):
        return _ovpn3.IPAddr___le__(self, other)

    def __ge__(self, other):
        return _ovpn3.IPAddr___ge__(self, other)

    def unspecified(self):
        return _ovpn3.IPAddr_unspecified(self)

    def specified(self):
        return _ovpn3.IPAddr_specified(self)

    def all_zeros(self):
        return _ovpn3.IPAddr_all_zeros(self)

    def all_ones(self):
        return _ovpn3.IPAddr_all_ones(self)

    def is_loopback(self):
        return _ovpn3.IPAddr_is_loopback(self)

    def defined(self):
        return _ovpn3.IPAddr_defined(self)

    def version_string(self):
        return _ovpn3.IPAddr_version_string(self)

    @staticmethod
    def version_string_static(ver):
        return _ovpn3.IPAddr_version_string_static(ver)

    def version(self):
        return _ovpn3.IPAddr_version(self)

    def version_mask(self, *args):
        return _ovpn3.IPAddr_version_mask(self, *args)

    def version_index(self):
        return _ovpn3.IPAddr_version_index(self)

    def family(self):
        return _ovpn3.IPAddr_family(self)

    def is_compatible(self, other):
        return _ovpn3.IPAddr_is_compatible(self, other)

    def is_ipv6(self):
        return _ovpn3.IPAddr_is_ipv6(self)

    def verify_version_consistency(self, other):
        return _ovpn3.IPAddr_verify_version_consistency(self, other)

    def validate_netmask(self):
        return _ovpn3.IPAddr_validate_netmask(self)

    def prefix_len(self):
        return _ovpn3.IPAddr_prefix_len(self)

    def scope_id(self):
        return _ovpn3.IPAddr_scope_id(self)

    def host_len(self):
        return _ovpn3.IPAddr_host_len(self)

    def extent_from_netmask(self):
        return _ovpn3.IPAddr_extent_from_netmask(self)

    def size(self):
        return _ovpn3.IPAddr_size(self)

    def size_bytes(self):
        return _ovpn3.IPAddr_size_bytes(self)

    @staticmethod
    def version_size(v):
        return _ovpn3.IPAddr_version_size(v)

    def hashval(self):
        return _ovpn3.IPAddr_hashval(self)

    def __str__(self):
        return _ovpn3.IPAddr___str__(self)

    def __repr__(self):
        return _ovpn3.IPAddr___repr__(self)

    def __hash__(self):
        return self.hashval()


    marshall_type = str

    __swig_destroy__ = _ovpn3.delete_IPAddr

# Register IPAddr in _ovpn3:
_ovpn3.IPAddr_swigregister(IPAddr)

def IPAddr_validate(*args):
    return _ovpn3.IPAddr_validate(*args)

def IPAddr_is_valid(ipstr):
    return _ovpn3.IPAddr_is_valid(ipstr)

def IPAddr_from_string(*args):
    return _ovpn3.IPAddr_from_string(*args)

def IPAddr_from_hex(v, s):
    return _ovpn3.IPAddr_from_hex(v, s)

def IPAddr_from_ipv4(addr):
    return _ovpn3.IPAddr_from_ipv4(addr)

def IPAddr_from_ipv6(addr):
    return _ovpn3.IPAddr_from_ipv6(addr)

def IPAddr_from_sockaddr(sa):
    return _ovpn3.IPAddr_from_sockaddr(sa)

def IPAddr_sockaddr_defined(sa):
    return _ovpn3.IPAddr_sockaddr_defined(sa)

def IPAddr_from_ulong(v, ul):
    return _ovpn3.IPAddr_from_ulong(v, ul)

def IPAddr_from_long(v, ul):
    return _ovpn3.IPAddr_from_long(v, ul)

def IPAddr_from_byte_string(bytestr):
    return _ovpn3.IPAddr_from_byte_string(bytestr)

def IPAddr_from_zero(v):
    return _ovpn3.IPAddr_from_zero(v)

def IPAddr_from_one(v):
    return _ovpn3.IPAddr_from_one(v)

def IPAddr_from_zero_complement(v):
    return _ovpn3.IPAddr_from_zero_complement(v)

def IPAddr_validate_prefix_len(v, prefix_len):
    return _ovpn3.IPAddr_validate_prefix_len(v, prefix_len)

def IPAddr_netmask_from_prefix_len(v, prefix_len):
    return _ovpn3.IPAddr_netmask_from_prefix_len(v, prefix_len)

def IPAddr_version_string_static(ver):
    return _ovpn3.IPAddr_version_string_static(ver)

def IPAddr_version_size(v):
    return _ovpn3.IPAddr_version_size(v)



